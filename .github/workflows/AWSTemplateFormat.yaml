AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template para crear una VPC y una instancia EC2 con Ubuntu'

Parameters:
  EnvironmentName:
    Description: Nombre del entorno para identificar los recursos
    Type: String
    Default: MicroservicesEnv

  VpcCIDR:
    Description: CIDR block para la VPC
    Type: String
    Default: 10.0.0.0/16

  PublicSubnetCIDR:
    Description: CIDR block para la subnet pública
    Type: String
    Default: 10.0.1.0/24

  InstanceType:
    Description: Tipo de instancia EC2
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t3.micro
      - t3.small
      - t3.medium

  KeyName:
    Description: Nombre del key pair para SSH
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Debe ser el nombre de un key pair existente

  SSHLocation:
    Description: Rango IP permitido para SSH (CIDR)
    Type: String
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Debe ser un CIDR válido (x.x.x.x/x)

Mappings:
  RegionMap:
    us-east-1:
      Ubuntu2204: ami-0a6c68a92d78fed7c
    us-east-2:
      Ubuntu2204: ami-07e26c3c830227d83
    us-west-1:
      Ubuntu2204: ami-054965c6cd7c6e462
    us-west-2:
      Ubuntu2204: ami-0530ca8899facfe0d
    eu-west-1:
      Ubuntu2204: ami-0694d931cee696b4d
    eu-west-2:
      Ubuntu2204: ami-05c96317a6278cfaa
    eu-central-1:
      Ubuntu2204: ami-0ec7f9846a19878de
    ap-southeast-1:
      Ubuntu2204: ami-078c1149e3d2e2410
    ap-southeast-2:
      Ubuntu2204: ami-0310483fb2b488153
    ap-northeast-1:
      Ubuntu2204: ami-0ffac85dc70a2a1d9
    sa-east-1:
      Ubuntu2204: ami-04b3c23ec8efcc2d6

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-VPC

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-IGW

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Subnet Pública
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnetCIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Public-Subnet

  # Tabla de Ruteo Pública
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Public-Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  # Grupo de Seguridad
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Habilitar SSH y puertos para microservicios
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8082
          ToPort: 8083
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-EC2-SG

  # Instancia EC2
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      KeyName: !Ref KeyName
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", Ubuntu2204]
      SubnetId: !Ref PublicSubnet
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 30
            VolumeType: gp3
            DeleteOnTermination: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          # Actualizar el sistema
          apt-get update
          apt-get upgrade -y

          # Instalar Docker
          apt-get install -y apt-transport-https ca-certificates curl software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
          add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
          apt-get update
          apt-get install -y docker-ce docker-ce-cli containerd.io

          # Instalar Docker Compose
          curl -L "https://github.com/docker/compose/releases/download/v2.24.3/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose

          # Crear usuario ubuntu si no existe y añadirlo al grupo docker
          if ! id "ubuntu" &>/dev/null; then
            useradd -m -s /bin/bash ubuntu
          fi
          usermod -aG docker ubuntu

          # Iniciar y habilitar Docker
          systemctl start docker
          systemctl enable docker

          # Crear directorio para la aplicación
          mkdir -p /home/ubuntu/microservice-app
          chown -R ubuntu:ubuntu /home/ubuntu/microservice-app

      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-EC2-Instance

Outputs:
  VPC:
    Description: ID de la VPC
    Value: !Ref VPC
    Export:
      Name: !Sub ${EnvironmentName}-VPC-ID

  PublicSubnet:
    Description: ID de la Subnet Pública
    Value: !Ref PublicSubnet
    Export:
      Name: !Sub ${EnvironmentName}-Public-Subnet-ID

  EC2InstancePublicIP:
    Description: IP Pública de la instancia EC2
    Value: !GetAtt EC2Instance.PublicIp
    Export:
      Name: !Sub ${EnvironmentName}-EC2-Public-IP

  EC2InstancePublicDNS:
    Description: DNS Público de la instancia EC2
    Value: !GetAtt EC2Instance.PublicDnsName
    Export:
      Name: !Sub ${EnvironmentName}-EC2-Public-DNS

  EC2SecurityGroup:
    Description: ID del grupo de seguridad de la instancia EC2
    Value: !Ref EC2SecurityGroup
    Export:
      Name: !Sub ${EnvironmentName}-EC2-SecurityGroup-ID